
generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model node {
  nodeID    String  @id
  xcoord    Int
  ycoord    Int
  floor     String
  building  String
  nodeType  String
  longName  String
  shortName String
  edges     String
  blocked   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model edge {
  edgeID      String @id
  startNodeID String
  endNodeID   String
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model path {
  uniqueID    Int    @id @default(autoincrement())
  startNodeID String
  endNodeID   String
  createdAt DateTime @default(now())
  //empId Int @default(1)
  //employee employee @relation(fields: [empId], references: [ID])
}

model employee {
  employeeID     Int      @default(autoincrement())
  created_at String @id
  email String
  name String
  //lastname
  familyName String?
  birthdate String?
  phone_number String? @unique
  position  String?
  admin Boolean @default(false)
  createdAt DateTime @default(now())
}

enum ServiceType {
  FLOWER
  GIFT
  INTERPRETER
  SECURITY
  MEDICINE
  SANITATION
  ROOMSCHEDULE
  MEDICALDEVICE
}

model service {
  // normal service inputs
  location String
  status String
  priority String
  date DateTime @default(now())

  // track when it was created or changed
  createdAt DateTime @default(now())
  updatedAt DateTime?

  //potential types
  serviceType ServiceType
  flower       flower?
  gift         gift?
  interpreter  interpreter?
  security     security?
  medicine     medicine?
  sanitation   sanitation?
  roomschedule roomschedule?
  medicaldevice medicaldevice?

  //service ID
  serviceId Int @id @default(autoincrement())
}


model flower {
  id Int @id @default(autoincrement())
  servId          Int @unique
  patientName String
  senderName  String
  cardMessage String
  flowerType  String
  service        service @relation(fields: [servId], references: [serviceId])
}

model gift {
  id Int @id @default(autoincrement())
  servId            Int @unique
  recipientName String
  message       String
  giftSize      String
  wrapping      String
  service        service  @relation(fields: [servId], references: [serviceId])
}

model interpreter {
  id Int @id @default(autoincrement())
  servId             Int @unique
  clientName     String
  language       String
  duration       String
  additionalInfo String
  service        service  @relation(fields: [servId], references: [serviceId])
}

model security {
  id Int @id @default(autoincrement())
  servId               Int @unique
  priority      String
  requestType      String
  alertAuthorities Boolean
  service        service  @relation(fields: [servId], references: [serviceId])
}

model medicine {
  id Int @id @default(autoincrement())
  servId               Int @unique
  patientName      String
  patientCondition String
  drugName         String
  drugQuantity     String
  service        service  @relation(fields: [servId], references: [serviceId])

}

model sanitation {
  id Int @id @default(autoincrement())
  servId             Int @unique
  patientName    String
  serviceType    String
  additionalInfo String
  service        service  @relation(fields: [servId], references: [serviceId])
}

model roomschedule {
  id Int @id @default(autoincrement())
  servId           Int @unique
  serviceType  String
  startTime    String
  endTime      String
  service        service  @relation(fields: [servId], references: [serviceId])
}

model medicaldevice {
  id Int @id @default(autoincrement())
  servId             Int @unique
  selectedDevice String
  withBalloons   Boolean
  service        service  @relation(fields: [servId], references: [serviceId])
}
